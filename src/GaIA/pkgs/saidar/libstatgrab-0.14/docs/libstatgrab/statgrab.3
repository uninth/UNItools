.TH statgrab 3 $Date:\ 2005/04/25\ 11:25:45\ $ i\-scream 
.SH NAME
statgrab \- get system statistics
.SH SYNOPSIS
.nf
#include <statgrab.h>
.fi
.sp 1
.PP
int \fIsg_init\fR(void);
.PP
int \fIsg_drop_privileges\fR(void);
.PP
sg_error \fIsg_get_error\fR(void);
.PP
const char *\fIsg_get_error_arg\fR(void);
.PP
int\fIsg_get_error_errno\fR(void);
.PP
const char *\fIsg_str_error\fR(sg_error \fIcode\fR);
.PP
sg_cpu_stats *\fIsg_get_cpu_stats\fR(void);
.PP
sg_cpu_stats *\fIsg_get_cpu_stats_diff\fR(void);
.PP
sg_cpu_percents *\fIsg_get_cpu_percents\fR(void);
.PP
sg_disk_io_stats *\fIsg_get_disk_io_stats\fR(int *\fIentries\fR);
.PP
sg_disk_io_stats *\fIsg_get_disk_io_stats_diff\fR(int *\fIentries\fR);
.PP
sg_fs_stats *\fIsg_get_fs_stats\fR(void);
.PP
sg_host_info *\fIsg_get_host_info\fR(void);
.PP
sg_load_stats *\fIsg_get_load_stats\fR(void);
.PP
sg_mem_stats *\fIsg_get_mem_stats\fR(void);
.PP
sg_swap_stats *\fIsg_get_swap_stats\fR(void);
.PP
sg_network_io_stats *\fIsg_get_network_io_stats\fR(int *\fIentries\fR);
.PP
sg_network_io_stats *\fIsg_get_network_io_stats_diff\fR(int *\fIentries\fR);
.PP
sg_network_iface_stats *\fIsg_get_network_iface_stats\fR(int *\fIentries\fR);
.PP
sg_page_stats *\fIsg_get_page_stats\fR(void);
.PP
sg_page_stats *\fIsg_get_page_stats_diff\fR(void);
.PP
sg_process_count *\fIsg_get_process_stats\fR(void);
.PP
sg_user_stats *\fIsg_get_user_stats\fR(void);
.SH DESCRIPTION
The statgrab library provides a cross\-platform interface to getting
system statistics. Each of the function calls returns a structure
containing statistics. See the manual page for each individual
function for more details on usage.
.PP
sg_init must be the first
function you call before you start to use libstatgrab; it performs all
the one\-time initialisation operations that need setuid/setgid
privileges. For instance, on *BSD it opens a descriptor to be able to
read kernel structures later on, and on Solaris it reads the device
mappings that in some cases are only accessible by root (machines with
a /dev/osa). Once this has run, the other libstatgrab functions no longer 
need elevated privileges. It is therefore a good idea to call
sg_drop_privileges, which discards
setuid and setgid privileges, immediately after you call
sg_init, unless your application has
another reason for needing setuid or setgid privileges.
.PP
sg_init and
sg_drop_privileges return 0 on success, and
non\-zero on failure.
.PP
There are three functions relating to error reporting in libstatgrab.
The first, sg_get_error returns an sg_error code
which relates to the last error generated by libstatgrab. This can be
converted to a string by calling sg_str_error
giving the sg_error code as an argument. An optional
argument may be set when the error was generated. This can be
accessed by calling sg_get_error_arg;
NULL will be returned if no argument has
been set. Some errors will also record the value of the system
errno variable when the error occurred; this can be retrieved by
calling sg_get_error_errno, which will
return 0 if no valid errno has been recorded.
.PP
It is the intended practice that whenever a libstatgrab function is
called and subsequently fails that an appropriate error will be set.
.PP
The library was originally written to support the i\-scream
central monitoring system, but has since become a standalone
package. It has been ported to work on Linux, NetBSD, FreeBSD,
OpenBSD, DragonFly BSD, Solaris, HP\-UX and Cygwin.
.SH SEE\ ALSO
\fBsg_get_cpu_percents\fR(3)
\fBsg_get_disk_io_stats\fR(3)
\fBsg_get_fs_stats\fR(3)
\fBsg_get_host_info\fR(3)
\fBsg_get_load_stats\fR(3)
\fBsg_get_mem_stats\fR(3)
\fBsg_get_network_io_stats\fR(3)
\fBsg_get_network_iface_stats\fR(3)
\fBsg_get_page_stats\fR(3)
\fBsg_get_process_stats\fR(3)
\fBsg_get_user_stats\fR(3)
.SH WEBSITE
http://www.i\-scream.org/libstatgrab/
