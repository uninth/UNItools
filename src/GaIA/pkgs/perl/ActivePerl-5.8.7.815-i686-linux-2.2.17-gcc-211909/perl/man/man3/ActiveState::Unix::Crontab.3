.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Unix::Crontab 3"
.TH ActiveState::Unix::Crontab 3 "2004-11-26" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActiveState::Unix::Crontab \- Portable manipulation of the crontab system
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::Unix::Crontab qw(cron_add);
.Ve
.PP
.Vb 1
\& cron_add(cmd => "ls -l /etc");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides function that allow portable manipulation of the
crontab system found on Unix.
.PP
The following functions are provided and manipulate the crontab entry
for the current user
.IP "\fIcron_edit()\fR" 4
.IX Item "cron_edit()"
This function invokes the editor on the current crontab file.
The function will croak on failure.
.ie n .IP "cron_add( $line )" 4
.el .IP "cron_add( \f(CW$line\fR )" 4
.IX Item "cron_add( $line )"
.PD 0
.ie n .IP "cron_add( %opts )" 4
.el .IP "cron_add( \f(CW%opts\fR )" 4
.IX Item "cron_add( %opts )"
.PD
This function add an entry to the current crontab file.  The function
either takes a single cron line or a set of key/value paired
parameters; see \fIcron_parse()\fR description below.  A \f(CW\*(C`comment\*(C'\fR can be
passed together with a \f(CW\*(C`cmd\*(C'\fR.
.ie n .IP "$line = cron_format( %opts )" 4
.el .IP "$line = cron_format( \f(CW%opts\fR )" 4
.IX Item "$line = cron_format( %opts )"
This formats a single crontab entry line.  This is the inverse of the
\&\fIcron_parse()\fR function.  See the description of \fIcron_parse()\fR for what
options to pass.
.ie n .IP "%opts = cron_parse( $line )" 4
.el .IP "%opts = cron_parse( \f(CW$line\fR )" 4
.IX Item "%opts = cron_parse( $line )"
This taks a single crontab line and parse it out as a set of key/value
pairs.  This is the inverse of the \fIcron_format()\fR function.  The
\&\fIcron_list()\fR function is used to read out lines from crontab.
.Sp
There are 4 different results that can be returned:
.RS 4
.IP "1." 4
An empty line simply returns an empty \f(CW%opts\fR.
.IP "2." 4
An line containing the setting of an environment variable returns:
.Sp
.Vb 2
\&  env:     name of the environment variable
\&  value:   the value it takes
.Ve
.IP "3." 4
An line containing a scheduled command contains:
.Sp
.Vb 8
\&  cmd:     what command to execute
\&  data:    stdin data provided to the command
\&  enabled: is the command enabled or not
\&  min:     which minute to run
\&  hour:    which hour to run
\&  mday:    which day of month to run
\&  mon:     which month to run
\&  wday:    which week day to run
.Ve
.Sp
Only \f(CW\*(C`cmd\*(C'\fR will always be there.  The \f(CW\*(C`cmd\*(C'\fR and \f(CW\*(C`data\*(C'\fR is plain
strings.  The \f(CW\*(C`enabled\*(C'\fR is a boolean.  The time and date fields take
a list of numbers or ranges:
.Sp
.Vb 4
\&  5
\&  1,2
\&  1-3
\&  1,2,5-9,12
.Ve
.Sp
Note that no space is allowed in these values.  The range for \f(CW\*(C`wday\*(C'\fR
is 0 .. 6, with 0 as Sunday.
.Sp
Portable applications should limit the settings to this format.  Some
implementations of cron also allow step values and/or plain English
names for the weekdays or months.
.IP "4" 4
.IX Item "4"
Anything else is returned as a comment:
.Sp
.Vb 1
\&  comment: comment text (including leading '#')
.Ve
.RE
.RS 4
.RE
.ie n .IP "cron_install( @lines )" 4
.el .IP "cron_install( \f(CW@lines\fR )" 4
.IX Item "cron_install( @lines )"
This installes the given crontab lines as the current crontab file.
.IP "@lines = \fIcron_list()\fR" 4
.IX Item "@lines = cron_list()"
This extract the crontab lines from the current crontab file.  The
lines are returned as is and can be parsed with the \fIcron_parse()\fR
function.
.IP "@cmds = \fIcron_cmds()\fR" 4
.IX Item "@cmds = cron_cmds()"
This extracts the currently installed crontab commands.
.PP
The following commands are available for 'root' to use:
.ie n .IP "cron_allow_user( $user )" 4
.el .IP "cron_allow_user( \f(CW$user\fR )" 4
.IX Item "cron_allow_user( $user )"
This make sure that the given user is allowed to use the crontab
system.
.ie n .IP "cron_deny_user( $user )" 4
.el .IP "cron_deny_user( \f(CW$user\fR )" 4
.IX Item "cron_deny_user( $user )"
The tell the system the the given user is to allowed to use the
crontab system.
.ie n .IP "cron_remove_user( $user )" 4
.el .IP "cron_remove_user( \f(CW$user\fR )" 4
.IX Item "cron_remove_user( $user )"
This remove all records of the given user in the crontab system.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This disables all cron commands:
.PP
.Vb 3
\& #!/usr/bin/perl -w
\& use ActiveState::Unix::Crontab qw(cron_list cron_install
\&                                   cron_parse cron_format);
.Ve
.PP
.Vb 2
\& my $mod;
\& my @list = cron_list();
.Ve
.PP
.Vb 8
\& for (@list) {
\&     my %line = cron_parse($_);
\&     if ($line{cmd} && $line{enabled}) {
\&         $line{enabled} = 0;
\&         $_ = cron_format(%line);
\&         $mod++;
\&     }
\& }
.Ve
.PP
.Vb 1
\& cron_install(@list);
.Ve
.PP
Enabling them again is left as an exercise for the interested
developer.
.PP
cron_install(@list) if \f(CW$mod\fR;
.SH "SEE ALSO"
.IX Header "SEE ALSO"
crontab
