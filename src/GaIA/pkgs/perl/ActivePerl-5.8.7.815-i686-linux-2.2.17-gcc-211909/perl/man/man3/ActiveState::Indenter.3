.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Indenter 3"
.TH ActiveState::Indenter 3 "2004-11-26" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActiveState::Indenter \- Keep track of indentation levels
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::Indenter;
.Ve
.PP
.Vb 6
\& my $fh = ActiveState::Indenter->new(*STDOUT);
\& $fh->print("if (foo()) {\en")
\& $fh->over;
\& $fh->print("# do something\en");
\& $fh->back;
\& $fh->print("}\en");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The ActiveState::Indenter works like an output file handle but will
insert whitespace in the printed stream reflecting the current
indentation level.  It is useful for printing out nicely formatted
programs.
.PP
The following methods are available:
.ie n .IP "$fh = ActiveState::Indenter\->new( $filehandle )" 4
.el .IP "$fh = ActiveState::Indenter\->new( \f(CW$filehandle\fR )" 4
.IX Item "$fh = ActiveState::Indenter->new( $filehandle )"
The object constructor takes a file handle as argument.  It will
create a new indenter object that prints to the given file handle.
.Sp
The \f(CW$filehandle\fR can actually be any object that implement a \fIprint()\fR
method.
.IP "$fh\->handle" 4
.IX Item "$fh->handle"
Returns back the filehandle passed to the constructor.
.IP "$fh\->line_width" 4
.IX Item "$fh->line_width"
.PD 0
.ie n .IP "$fh\->line_width( $new_width )" 4
.el .IP "$fh\->line_width( \f(CW$new_width\fR )" 4
.IX Item "$fh->line_width( $new_width )"
.PD
This get/set the current line width.  The line width is used by the
\&\fIsoft_space()\fR method.  The default is 70.
.IP "$fh\->indent_offset" 4
.IX Item "$fh->indent_offset"
.PD 0
.ie n .IP "$fh\->indent_offset( $new_offset )" 4
.el .IP "$fh\->indent_offset( \f(CW$new_offset\fR )" 4
.IX Item "$fh->indent_offset( $new_offset )"
.PD
This get/set the standard indentation offset.  The default is 4.
.ie n .IP "$fh\->print( $string )" 4
.el .IP "$fh\->print( \f(CW$string\fR )" 4
.IX Item "$fh->print( $string )"
The \fIprint()\fR will print the string given as argument to the wrapped
file handle but with suitable additional leading space added.  The
indenter object will never buffer output, so all content of the string
will have reached the file when print returns.
.IP "$fh\->soft_space" 4
.IX Item "$fh->soft_space"
This will print a space character \*(L" \*(R" if there is more room on the
line, or a newline otherwise.
.ie n .IP "$col = $fh\->indent" 4
.el .IP "$col = \f(CW$fh\fR\->indent" 4
.IX Item "$col = $fh->indent"
This returns the current indentation column.
.IP "$fh\->over" 4
.IX Item "$fh->over"
.PD 0
.ie n .IP "$fh\->over( $offset )" 4
.el .IP "$fh\->over( \f(CW$offset\fR )" 4
.IX Item "$fh->over( $offset )"
.PD
This increase the indentation column with the given amount.  Without
argument the standard amount is used.
.IP "$fh\->over_cur" 4
.IX Item "$fh->over_cur"
This sets the indentation column the same as the current column.
.ie n .IP "$fh\->over_abs( $col )" 4
.el .IP "$fh\->over_abs( \f(CW$col\fR )" 4
.IX Item "$fh->over_abs( $col )"
This set the indentation column to the number given.
.IP "$fh\->back" 4
.IX Item "$fh->back"
Returns to the previous indentation column.
.ie n .IP "$col = $fh\->column" 4
.el .IP "$col = \f(CW$fh\fR\->column" 4
.IX Item "$col = $fh->column"
Returns the current column position.
.ie n .IP "$line = $fh\->line" 4
.el .IP "$line = \f(CW$fh\fR\->line" 4
.IX Item "$line = $fh->line"
.PD 0
.ie n .IP "$fh\->line( $new_line )" 4
.el .IP "$fh\->line( \f(CW$new_line\fR )" 4
.IX Item "$fh->line( $new_line )"
.PD
This get/set the current line number.
.ie n .IP "$n = $fh\->depth" 4
.el .IP "$n = \f(CW$fh\fR\->depth" 4
.IX Item "$n = $fh->depth"
Returns the current indentation depth.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2003 ActiveState Corp.  All rights reserved.
