.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActivePerl::Config 3"
.TH ActivePerl::Config 3 "2005-10-26" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActivePerl::Config \- Override the ActivePerl configuration
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Config qw(%Config);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The standard \f(CW\*(C`Config\*(C'\fR module provides the \f(CW%Config\fR hash containing
information about how this perl was built.  These configuration values
are used by modules and programs with the assumption that they still
apply for the system where perl is deployed.  This assumption does not
always hold.  The \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR module will for instance
assume that it can use the compiler \f(CW$Config\fR{cc} for building new
extensions, but another compiler might be the only one available.
.PP
The \f(CW\*(C`ActivePerl::Config\*(C'\fR module provides a solution for this.  It
overrides the values of \f(CW%Config\fR to better match the system where perl
currently runs.  For example, on Windows allows you to build extensions
with the free compiler gcc (see <http://www.mingw.org/>) even
though ActivePerl for Windows itself is built with the commercial
Microsoft Visual Studio 6 compiler.
.PP
The \f(CW\*(C`ActivePerl::Config\*(C'\fR module is not used directly.  It is
automatically loaded by \f(CW\*(C`Config\*(C'\fR if available and works behind the
scenes, overriding the values that are found in the \f(CW%Config\fR hash.  The
overriden values from \f(CW\*(C`ActivePerl::Config\*(C'\fR will also show when \f(CW\*(C`perl
\&\-V:foo\*(C'\fR is invoked from the command line.
.Sh "Window overrides"
.IX Subsection "Window overrides"
For ActivePerl on Windows the following \f(CW%Config\fR overrides are provided:
.IP "$Config{make}" 4
.IX Item "$Config{make}"
This will be \f(CW\*(C`nmake\*(C'\fR by default, but if no \fInmake\fR program can be
found and other compatible make programs are found, then this value
will reflect that.  Currently \fIdmake\fR is the only other make
implementation that is compatible enough to build perl extensions.
.ie n .IP "$Config{cc}, $Config{ccflags},..." 4
.el .IP "$Config{cc}, \f(CW$Config\fR{ccflags},..." 4
.IX Item "$Config{cc}, $Config{ccflags},..."
The value of \f(CW$Config\fR{cc} will be \f(CW\*(C`cl\*(C'\fR by default, but if no \f(CW\*(C`cl\*(C'\fR
program can be found and \fIgcc\fR is found, then this value is \f(CW\*(C`gcc\*(C'\fR
and other values related to the compiler environment is adjusted
accordingly.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The following environment variables can influence the operation of the
\&\f(CW\*(C`ActivePerl::Config\*(C'\fR module:
.IP "\s-1ACTIVEPERL_CONFIG_DISABLE\s0" 4
.IX Item "ACTIVEPERL_CONFIG_DISABLE"
If set to a \s-1TRUE\s0 value (e.g. \*(L"1\*(R"), prevent \f(CW\*(C`ActivePerl::Config\*(C'\fR from
overriding any \f(CW%Config\fR value; the only values seen in \f(CW%Config\fR would be
those determined at perl build time.  Another way to disable
\&\f(CW\*(C`ActivePerl::Config\*(C'\fR permanently is to remove it using ppm
(\f(CW\*(C`ppm remove ActivePerl\-Config\*(C'\fR)
.IP "\s-1ACTIVEPERL_CONFIG_\s0\fI\s-1FOO\s0\fR" 4
.IX Item "ACTIVEPERL_CONFIG_FOO"
Override the \f(CW$Config\fR{\fIfoo\fR} value.  For example if the
\&\s-1ACTIVEPERL_CONFIG_MAKE\s0 environment variable has the value \f(CW\*(C`dmake\*(C'\fR,
then so would \f(CW$Config\fR{make}.
.Sp
If the \s-1ACTIVEPERL_CONFIG_DISABLE\s0 variable is set, all other
\&\s-1ACTIVEPERL_CONFIG_\s0\fI\s-1FOO\s0\fR variables are ignored.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config
