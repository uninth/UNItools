.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Color 3"
.TH ActiveState::Color 3 "2004-11-26" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActiveState::Color \- Collection of color conversion functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& use ActiveState::Color qw(name_from_rgb rgb_from_name
\&                           rgb_from_hsv hsv_from_rgb
\&                          );
\& my($h, $s, $v) = hsv_from_rgb(rgb_from_name(shift));
\& # make the color fully saturated and a bit lighter
\& $s = 1; $v *= 1.2;
\& print name_from_rgb(rgb_from_hsv($h, $s, $v)), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following functions are provided:
.ie n .IP "($r, $g\fR, \f(CW$b\fR) = rgb_from_name( \f(CW$name )" 4
.el .IP "($r, \f(CW$g\fR, \f(CW$b\fR) = rgb_from_name( \f(CW$name\fR )" 4
.IX Item "($r, $g, $b) = rgb_from_name( $name )"
This will convert a color name or a hex RGB-tripplet to a decimal \s-1RGB\s0
value with \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR in the range 0.0 to 1.0.  The hex tripplet can
have any precision and can optionally be prefixed with \*(L"#\*(R".  If the
name is not recognized this function will croak.  Examples of valid
names are:
.Sp
.Vb 7
\&    #F0F
\&    #FF00FF
\&    #FFF000FFF
\&    ff00ff
\&    black
\&    BLACK
\&    yellow
.Ve
.ie n .IP "$hexname = hex_from_rgb( $r\fR, \f(CW$g\fR, \f(CW$b )" 4
.el .IP "$hexname = hex_from_rgb( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR )" 4
.IX Item "$hexname = hex_from_rgb( $r, $g, $b )"
This converts a decimal \s-1RGB\s0 value with \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR in the range 0.0 to
1.0 to an 8\-bit hex RGB\-tripplet.  The output will be on the form:
.Sp
.Vb 1
\&    #ff00ff
.Ve
.ie n .IP "$name = name_from_rgb( $r\fR, \f(CW$g\fR, \f(CW$b )" 4
.el .IP "$name = name_from_rgb( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR )" 4
.IX Item "$name = name_from_rgb( $r, $g, $b )"
This will convert a decimal \s-1RGB\s0 value to a color name.  If the color
is one of the 8 primary \s-1RGB\s0 colors then the name will be returned,
otherwise a hex RGB-tripplet is returned.  The 8 primary color names
are:
.Sp
.Vb 8
\&    black
\&    blue
\&    cyan
\&    green
\&    magenta
\&    red
\&    yellow
\&    white
.Ve
.ie n .IP "($r, $g\fR, \f(CW$b\fR) = rgb_from_hsv( \f(CW$h\fR, \f(CW$s\fR, \f(CW$v )" 4
.el .IP "($r, \f(CW$g\fR, \f(CW$b\fR) = rgb_from_hsv( \f(CW$h\fR, \f(CW$s\fR, \f(CW$v\fR )" 4
.IX Item "($r, $g, $b) = rgb_from_hsv( $h, $s, $v )"
.PD 0
.ie n .IP "($h, $s\fR, \f(CW$v\fR) = rgb_from_hsv( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b )" 4
.el .IP "($h, \f(CW$s\fR, \f(CW$v\fR) = rgb_from_hsv( \f(CW$r\fR, \f(CW$g\fR, \f(CW$b\fR )" 4
.IX Item "($h, $s, $v) = rgb_from_hsv( $r, $g, $b )"
.PD
These functions convert between the \s-1RGB\s0 and \s-1HSV\s0 color space.  The
range of \f(CW$s\fR, \f(CW$v\fR, \f(CW$r\fR, \f(CW$g\fR, and \f(CW$b\fR is 0.0 to 1.0.  The range of \f(CW$h\fR is 0.0
to 360.0.
.SH "BUGS"
.IX Header "BUGS"
none.
