.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RelocateTree 3"
.TH RelocateTree 3 "2005-11-02" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActiveState::RelocateTree \- copy tree substituting paths at the same time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use ActiveState::RelocateTree qw(relocate);
\&   relocate(from => 'C:\ePerl', to => 'D:\elang\eperl');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When a perl installation is copied into a new location, some of its
files need to be modified accordingly.  The
\&\f(CW\*(C`ActiveState::RelocateTree\*(C'\fR module provide functions that helps you
do this.
.PP
The following functions are provided.  None of them are exported by
default.
.ie n .IP "relocate( %options )" 4
.el .IP "relocate( \f(CW%options\fR )" 4
.IX Item "relocate( %options )"
This is the main entry point that applications will use.  The
following options are recognized:
.RS 4
.ie n .IP """to""" 4
.el .IP "\f(CWto\fR" 4
.IX Item "to"
The tree which must be transformed. Unless the \f(CW\*(C`inplace\*(C'\fR option is
true, it will copy the tree at \f(CW\*(C`from\*(C'\fR to \f(CW\*(C`to\*(C'\fR before transforming
it. This option is the only one required.  The other options have
reasonable defaults, so in most cases this is the only option you need
to provide.
.ie n .IP """from""" 4
.el .IP "\f(CWfrom\fR" 4
.IX Item "from"
The path from which to copy the perl tree. Defaults to \f(CW$Config{prefix}\fR, the
home of the currently executing perl interpreter.
.ie n .IP """search""" 4
.el .IP "\f(CWsearch\fR" 4
.IX Item "search"
This is the path which will be searched for and replaced in \f(CW\*(C`to\*(C'\fR. This
defaults to the value of \f(CW\*(C`from\*(C'\fR.
.ie n .IP """replace""" 4
.el .IP "\f(CWreplace\fR" 4
.IX Item "replace"
The replacement value for \f(CW\*(C`search\*(C'\fR. This defaults to the value of \f(CW\*(C`to\*(C'\fR.
.ie n .IP """inplace""" 4
.el .IP "\f(CWinplace\fR" 4
.IX Item "inplace"
If the tree at \f(CW\*(C`to\*(C'\fR already exists and you just want to transform it in\-situ,
use this option. It skips the copying step and just transforms the tree.
If \f(CW\*(C`from\*(C'\fR equals \f(CW\*(C`to\*(C'\fR, it is set to true and cannot be unset. Otherwise it
defaults to false.
.ie n .IP """killorig""" 4
.el .IP "\f(CWkillorig\fR" 4
.IX Item "killorig"
If you're really moving the tree, this option will remove \f(CW\*(C`from\*(C'\fR after
copying and transforming \f(CW\*(C`to\*(C'\fR. Use with care! Defaults to false.
.ie n .IP """bak""" 4
.el .IP "\f(CWbak\fR" 4
.IX Item "bak"
While relocating the tree, \fIrelocate()\fR creates a backup file for each file
being edited. This option allows you to specify the extension of backup files.
Defaults to \f(CW\*(C`.~1~\*(C'\fR.
.ie n .IP """savebaks""" 4
.el .IP "\f(CWsavebaks\fR" 4
.IX Item "savebaks"
Normally \fIrelocate()\fR deletes the backup files before returning. \f(CW\*(C`savebaks\*(C'\fR
skips that step, leaving the backup files alone. Defaults to false (backups
are deleted).
.ie n .IP """textonly""" 4
.el .IP "\f(CWtextonly\fR" 4
.IX Item "textonly"
Normally \fIrelocate()\fR edits both text and binary files. Text files are replaced
using a normal search-and-replace algorithm, but binary files are NULL-padded
so that all offsets remain the same. By default, \f(CW\*(C`textonly\*(C'\fR is false, i.e.
\&\fIrelocate()\fR operates on both text and binary files.
.ie n .IP """ranlib""" 4
.el .IP "\f(CWranlib\fR" 4
.IX Item "ranlib"
If \f(CW\*(C`ranlib\*(C'\fR is true, \fIrelocate()\fR will call \f(CW\*(C`ranlib\*(C'\fR on binary files which
look like library files (have the \f(CW$Config{_a}\fR extension). Defaults to true.
.ie n .IP """verbose""" 4
.el .IP "\f(CWverbose\fR" 4
.IX Item "verbose"
If \f(CW\*(C`verbose\*(C'\fR is true, \fIrelocate()\fR emits warning messages as it performs
certain operations. This may be useful for debugging, or for command-line
tools, where user feedback is a good thing.
.ie n .IP """quiet""" 4
.el .IP "\f(CWquiet\fR" 4
.IX Item "quiet"
Normally, \fIrelocate()\fR prints out some status messages even with \f(CW\*(C`verbose\*(C'\fR
disabled. If \f(CW\*(C`quiet\*(C'\fR is true, all messages (except error messages) are
temporarily silenced. This option overrides \f(CW\*(C`verbose\*(C'\fR, so there isn't much
point calling \fIrelocate()\fR with both \f(CW\*(C`quiet\*(C'\fR and \f(CW\*(C`verbose\*(C'\fR set. By default,
\&\f(CW\*(C`quiet\*(C'\fR is false.
.ie n .IP """filelist""" 4
.el .IP "\f(CWfilelist\fR" 4
.IX Item "filelist"
If specified, \fIrelocate()\fR will write a list of the files modified to
\&\f(CW\*(C`filelist\*(C'\fR, one filename per line.  The lines are prefixed with \*(L"B \*(R"
for binary files and \*(L"T \*(R" for text files.
.RE
.RS 4
.RE
.ie n .IP "move_tree( $from\fR, \f(CW$to )" 4
.el .IP "move_tree( \f(CW$from\fR, \f(CW$to\fR )" 4
.IX Item "move_tree( $from, $to )"
.PD 0
.ie n .IP "move_tree( $from\fR, \f(CW$to\fR, \f(CW$delete_after\fR, \f(CW$verbose )" 4
.el .IP "move_tree( \f(CW$from\fR, \f(CW$to\fR, \f(CW$delete_after\fR, \f(CW$verbose\fR )" 4
.IX Item "move_tree( $from, $to, $delete_after, $verbose )"
.PD
This function will copy the directory tree at \f(CW$from\fR to the location
\&\f(CW$to\fR.
.Sp
If \f(CW$delete_after\fR is \s-1TRUE\s0, then tree at \f(CW$from\fR will be removed after the
copy completes. If \f(CW$verbose\fR is \s-1TRUE\s0, then print a message when
deleting the \f(CW$from\fR tree.
.ie n .IP "check( $file\fR, \f(CW$regexp\fR, \f(CW$is_binary )" 4
.el .IP "check( \f(CW$file\fR, \f(CW$regexp\fR, \f(CW$is_binary\fR )" 4
.IX Item "check( $file, $regexp, $is_binary )"
Returns \s-1TRUE\s0 if there are occurrences of \f(CW$regexp\fR in \f(CW$file\fR. It is used
by \fIrelocate()\fR to search for files which should be edited.  If
\&\f(CW$is_binary\fR is \s-1TRUE\s0, then read the file in binmode.
.ie n .IP "edit( $regexp\fR, \f(CW$from\fR, \f(CW$dest\fR, \f(CW$bak\fR, \f(CW$are_binary\fR, \f(CW@files )" 4
.el .IP "edit( \f(CW$regexp\fR, \f(CW$from\fR, \f(CW$dest\fR, \f(CW$bak\fR, \f(CW$are_binary\fR, \f(CW@files\fR )" 4
.IX Item "edit( $regexp, $from, $dest, $bak, $are_binary, @files )"
\&\fIedit()\fR is designed to rip though a set of files, efficiently replacing \f(CW$from\fR
with \f(CW$dest\fR. It operates on the whole set of files, which all need to be of the
same type (binary or text). It accepts the following parameters:
.RS 4
.IP "$regexp" 4
.IX Item "$regexp"
The regular expression to search for. Matching text will be replaced with
\&\f(CW$dest\fR.
.IP "$from" 4
.IX Item "$from"
The path to search for and replace. If \f(CW$are_binary\fR is true, this is used to
calculate the amount of NUL-padding required to preserve the length of strings.
It is not used otherwise.
.IP "$dest" 4
.IX Item "$dest"
The replacement string. If \f(CW$are_binary\fR is true and \f(CW$dest\fR is shorter than
\&\f(CW$from\fR, then it inserts a NULL-pad to preserve the original length of the
strings.
.IP "$bak" 4
.IX Item "$bak"
The extension to use when storing backup files.
.IP "$are_binary" 4
.IX Item "$are_binary"
A boolean: if true, the files are edited with binary semantics: the
filehandles are set to binmode, and strings are NULL\-padded. Otherwise
a plain-old substitution occurs.
.IP "@files" 4
.IX Item "@files"
A list of files to edit.
.RE
.RS 4
.RE
.ie n .IP "spongedir( $name )" 4
.el .IP "spongedir( \f(CW$name\fR )" 4
.IX Item "spongedir( $name )"
Returns the spongedir associated with a particular product.  The \f(CW$name\fR
is the spongedir you're interested in. It's case\-insensitive.  The
following spongedirs are known:
.RS 4
.IP "ppm" 10
.IX Item "ppm"
The sponge directory to be used in \s-1PPM\s0 packages.
.IP "thisperl" 10
.IX Item "thisperl"
The original directory in which this copy of Perl was built. This allows
\&\fIrelocate()\fR to detect when a replacement path will not fit into the binary.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
reloc_perl
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 ActiveState. All Rights Reserved.
ActiveState is a division of Sophos.
