.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Prompt 3"
.TH ActiveState::Prompt 3 "2004-11-26" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActiveState::Prompt \- Interactive questions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ActiveState::prompt qw(prompt yes enter);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following functions are provided:
.ie n .IP "prompt( $question\fR, \f(CW$default )" 4
.el .IP "prompt( \f(CW$question\fR, \f(CW$default\fR )" 4
.IX Item "prompt( $question, $default )"
.PD 0
.ie n .IP "prompt( $question\fR, \f(CW%opts )" 4
.el .IP "prompt( \f(CW$question\fR, \f(CW%opts\fR )" 4
.IX Item "prompt( $question, %opts )"
.PD
This function will ask a question on the terminal and return the
answer given.  The return value will always be defined.
.Sp
Options can be passed in as key/value pairs.  The following options
are recognized:
.Sp
.Vb 6
\&  default
\&  use_default
\&  silent
\&  trim_space
\&  must_match
\&  no_match_msg
.Ve
.Sp
The \f(CW\*(C`default\*(C'\fR is returned if the user simply press return.  The
default value is shown in brackets.  If no default is provided then no
brackets are added to the question.
.Sp
If \f(CW\*(C`trim_space\*(C'\fR is \s-1TRUE\s0, then any leading and trailing space in the
anwer is trimmed off and any internal space is collapsed to a single
space.
.Sp
The \f(CW\*(C`must_match\*(C'\fR value is used to validate answers.  It can be either
a function, array or regular expression.  If it is a function, then
the function is called with the answer given and should return \s-1TRUE\s0 if
it is to be accepted.  If it is an array, then the answer must be one
of the values in the array.  If it is an regular expression then it
must match it.
.Sp
The \f(CW\*(C`no_match_msg\*(C'\fR is printed if the given answer does not validate
as specified in \f(CW\*(C`must_match\*(C'\fR.
.Sp
If \f(CW\*(C`use_default\*(C'\fR is \s-1TRUE\s0, then no answer is read from the terminal
and the default is returned (or "" if there is no default).  The
\&\f(CW\*(C`use_default\*(C'\fR is by default \s-1TRUE\s0 if the program is not running on a
terminal.
.Sp
If \f(CW\*(C`silent\*(C'\fR is \s-1TRUE\s0, then the default is returned (or "" if there is
no default) and nothing is printed on the terminal.
.ie n .IP "yes( $question\fR, \f(CW$default )" 4
.el .IP "yes( \f(CW$question\fR, \f(CW$default\fR )" 4
.IX Item "yes( $question, $default )"
Will use the prompt function to ask a question and then return a \s-1TRUE\s0
value if the answer was \*(L"yes\*(R" or \*(L"y\*(R".
.Sp
The default can either be a string like \*(L"yes\*(R", \*(L"y\*(R", \*(L"no\*(R" or \*(L"n\*(R", or a
boolean value in which case \*(L"yes\*(R" will be the default if \s-1TRUE\s0 and \*(L"no\*(R"
otherwise.  This also means that if no \f(CW$default\fR is given it defaults
to \*(L"no\*(R".
.IP "\fIenter()\fR" 4
.IX Item "enter()"
Ask the use to press some key before the function returns.
.SH "BUGS"
.IX Header "BUGS"
None.
