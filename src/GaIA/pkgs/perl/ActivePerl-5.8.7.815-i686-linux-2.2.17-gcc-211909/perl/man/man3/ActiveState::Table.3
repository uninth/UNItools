.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ActiveState::Table 3"
.TH ActiveState::Table 3 "2004-11-26" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
ActiveState::Table \- Simple table class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& $t = ActiveState::Table->new;
\& $t->add_row({ a => 1, b => 2 });
\& print $t->as_csv;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Instances of the \f(CW\*(C`ActiveState::Table\*(C'\fR class represent a 2 dimensional
table of fields (or columns if you wish) and rows.  The fields are
ordered and have case-sensitive names. The rows are numbered.
.PP
The following methods are provided:
.IP "$t = ActiveState::Table\->new" 4
.IX Item "$t = ActiveState::Table->new"
This creates a new empty table object.
.IP "$t\->fields" 4
.IX Item "$t->fields"
This returns the current field names.  In scalar context it returns
the number of fields.
.IP "$t\->rows" 4
.IX Item "$t->rows"
The returns the current rows.  Each row is returned as reference to an
array of values in the same order as the fields. The array might be
shorter than the number of fields, when the trailing values are \f(CW\*(C`undef\*(C'\fR.
.Sp
In scalar context it returns the number of rows in the table.
.ie n .IP "$t\->fetchrow( $index )" 4
.el .IP "$t\->fetchrow( \f(CW$index\fR )" 4
.IX Item "$t->fetchrow( $index )"
This returns the given row.  An array reference is returned in scalar
context.  The array might be shorter than the number of fields, when
the trailing values are \f(CW\*(C`undef\*(C'\fR.
.Sp
In list context the values are returned one by one.  There will be as
many values as there are fields in the table.  Some values might be
\&\f(CW\*(C`undef\*(C'\fR.
.Sp
If there is no row with the given \f(CW$index\fR, then \f(CW\*(C`undef\*(C'\fR is returned in
scalar context and the empty list in list context.
.ie n .IP "$t\->fetchrow_arrayref( $index )" 4
.el .IP "$t\->fetchrow_arrayref( \f(CW$index\fR )" 4
.IX Item "$t->fetchrow_arrayref( $index )"
Same as \fIfetchrow()\fR but will return an array reference even in list
context.
.ie n .IP "$t\->fetchrow_hashref( $index )" 4
.el .IP "$t\->fetchrow_hashref( \f(CW$index\fR )" 4
.IX Item "$t->fetchrow_hashref( $index )"
This returns the given row.  A hash reference is returned with keys
corresponding to the field names and the values corresponding to the
given row.  The values might be \f(CW\*(C`undef\*(C'\fR, but a key for all the fields
will exist.
.Sp
If there is no row with the given \f(CW$index\fR, then \f(CW\*(C`undef\*(C'\fR is returned.
.ie n .IP "$t\->add_field( $field )" 4
.el .IP "$t\->add_field( \f(CW$field\fR )" 4
.IX Item "$t->add_field( $field )"
This adds another field to the table.  The field must be a string.  If
the field already exists it is not added again, and the \fIadd_field()\fR
call does nothing.
.Sp
There is no return value.
.ie n .IP "$t\->add_row( $row )" 4
.el .IP "$t\->add_row( \f(CW$row\fR )" 4
.IX Item "$t->add_row( $row )"
This adds another row to the table.  The row must currently be a hash
reference.  If the hash contains new fields they are added
automatically in sorted order.  To enforce an order add the fields
before adding rows.
.Sp
There is no return value.
.ie n .IP "$t\->as_box( %options )" 4
.el .IP "$t\->as_box( \f(CW%options\fR )" 4
.IX Item "$t->as_box( %options )"
This formats the table as text and returns it. The following options
might be provided as key/value pairs:
.Sp
.Vb 6
\&   name                 | default
\&   ---------------------+----------
\&   null                 | "NULL"
\&   show_header          | 1
\&   show_tailer          | 1
\&   ---------------------+----------
.Ve
.ie n .IP "$t\->as_csv( %options )" 4
.el .IP "$t\->as_csv( \f(CW%options\fR )" 4
.IX Item "$t->as_csv( %options )"
This formats the table as a \s-1CSV\s0 file (\*(L"comma\-separated\-values\*(R") and
returns it.  The following options might be provided as key/value
pairs:
.Sp
.Vb 7
\&   name                 | default
\&   ---------------------+----------
\&   field_separator      | ","
\&   row_separator        | "\en"
\&   null                 | "NULL"
\&   show_header          | 1
\&   ---------------------+----------
.Ve
.Sp
The method does not currently quote or escape values if they contain
any of the separators.
.SH "BUGS"
.IX Header "BUGS"
none.
