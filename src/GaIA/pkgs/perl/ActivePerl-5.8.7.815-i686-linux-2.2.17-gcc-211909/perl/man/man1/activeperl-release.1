.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ACTIVEPERL-RELEASE 1"
.TH ACTIVEPERL-RELEASE 1 "2005-11-02" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "ActivePerl 5.8.7.815 \*(-- Release Notes"
.IX Header "ActivePerl 5.8.7.815  Release Notes"
Welcome, and thanks for downloading ActivePerl.  This release corresponds
to Perl version 5.8.7.
.PP
Please note that ActivePerl 800 series builds are \s-1NOT\s0 binary-compatible with
the older 600 and 500 series builds.  In particular, do not attempt to use
extensions or \s-1PPM\s0 packages built for the 600 and 500 series builds with
ActivePerl 800 series builds and vice versa.
.PP
The following platforms are supported:
.IP "\(bu" 8
\&\s-1AIX\s0 5.1 or later (rs6000)
.IP "\(bu" 8
Linux: Red Hat 6.2 or later (x86) 
.IP "\(bu" 8
Linux: Debian 2.2 or later (x86)
.IP "\(bu" 8
Mac \s-1OS\s0 X 10.3 \*(L"Panther\*(R" or later (PowerPC)
.IP "\(bu" 8
Solaris 2.6 or later (sparc)
.IP "\(bu" 8
Solaris 10 or later (x86)
.IP "\(bu" 8
Windows 9x, \s-1NT\s0, Me, 2000, \s-1XP\s0 and 2003 (x86)
.SH "Incompatibilities"
.IX Header "Incompatibilities"
The following list is a general summary of the known incompatibilities
between the Perl 5.8.0 source code release and earlier releases based on
Perl 5.6.0.  Be sure to consider these very carefully before upgrading.
.PP
Please check \*(L"Incompatible Changes\*(R" in perl581delta,
\&\*(L"Incompatible Changes\*(R" in perl582delta, and \*(L"Incompatible Changes\*(R" in perl584delta, for additional minor incompatible changes made in Perl 5.8.1, Perl
5.8.2 and Perl 5.8.4 respectively.
.Sh "Binary incompatibility"
.IX Subsection "Binary incompatibility"
\&\fBPerl 5.8 is not binary compatible with earlier releases of Perl.\fR
.PP
\&\fBYou have to recompile your \s-1XS\s0 modules.\fR
.PP
Pure Perl modules should continue to work, subject to the other
incompatibilities listed here.
.ie n .Sh "New Unicode semantics (no more ""use utf8"", almost)"
.el .Sh "New Unicode semantics (no more \f(CWuse utf8\fP, almost)"
.IX Subsection "New Unicode semantics (no more use utf8, almost)"
In general, the interfaces and implementation of Unicode support has
changed significantly from the 5.6 release.
.PP
Previously in Perl 5.6 to use Unicode one would say \*(L"use utf8\*(R" and
then the operations (like string concatenation) were Unicode-aware
in that lexical scope.
.PP
This was found to be an inconvenient interface, and in Perl 5.8 the
Unicode model has completely changed: now the \*(L"Unicodeness\*(R" is bound
to the data itself, and for most of the time \*(L"use utf8\*(R" is not needed
at all.  The only remaining use of \*(L"use utf8\*(R" is when the Perl script
itself has been written in the \s-1UTF\-8\s0 encoding of Unicode.  (\s-1UTF\-8\s0 has
not been made the default since there are many Perl scripts out there
that are using various national eight-bit character sets, which would
be illegal in \s-1UTF\-8\s0.)
.PP
See perluniintro for the explanation of the current model,
and utf8 for the current use of the utf8 pragma.
.Sh "Incompatible, but reliable, signals implementation"
.IX Subsection "Incompatible, but reliable, signals implementation"
The new safe signals implementation postpones handling of
signals until it's safe (in between the execution of low level opcodes).
.PP
This change may have surprising side effects because signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishing an internal operation (such as \fIsort()\fR) or an
external operation (like an I/O operation), and only then look at any
arrived signals (but before starting the next operation).
This means that the signal handler may be called at a different point
than before, conceivably when it is no longer useful.  Note that breaking
out from potentially blocking operations should still work, though.
.Sh "Perl debugger commands are different"
.IX Subsection "Perl debugger commands are different"
The command line Perl debugger (\f(CW\*(C`perl5db.pl\*(C'\fR) has been modified to present
a more consistent command interface.  To use the old style commands,
enter \f(CW\*(C`o CommandSet=pre580\*(C'\fR at the debugger prompt.
.ie n .Sh "Attributes for ""my"" variables now handled at run-time"
.el .Sh "Attributes for \f(CWmy\fP variables now handled at run-time"
.IX Subsection "Attributes for my variables now handled at run-time"
The \f(CW\*(C`my EXPR : ATTRS\*(C'\fR syntax now applies variable attributes at
run\-time.  (Subroutine and \f(CW\*(C`our\*(C'\fR variables still get attributes applied
at compile\-time.)  See attributes for additional details.  In particular,
however, this allows variable attributes to be useful for \f(CW\*(C`tie\*(C'\fR interfaces,
which was a deficiency of earlier releases.  Note that the new semantics
doesn't work with the Attribute::Handlers module (as of version 0.76).
.Sh "References to references stringify as \s-1REF\s0(...), not \s-1SCALAR\s0(...)"
.IX Subsection "References to references stringify as REF(...), not SCALAR(...)"
A reference to a reference now stringifies as \*(L"\s-1REF\s0(0x81485ec)\*(R" instead
of \*(L"\s-1SCALAR\s0(0x81485ec)\*(R" in order to be more consistent with the return
value of \fIref()\fR.
.Sh "\fIglob()\fP now returns filenames in alphabetical order"
.IX Subsection "glob() now returns filenames in alphabetical order"
The list of filenames from \fIglob()\fR (or <...>) is now by default sorted
alphabetically to be csh-compliant (which is what happened before
in most \s-1UNIX\s0 platforms).  (\fIbsd_glob()\fR continues to sort platform
natively, \s-1ASCII\s0 or \s-1EBCDIC\s0, unless \s-1GLOB_ALPHASORT\s0 is specified.)
.PP
This change was already included in Perl 5.6.1.
.Sh "\fITime::Local::timelocal()\fP and fractional seconds"
.IX Subsection "Time::Local::timelocal() and fractional seconds"
\&\fITime::Local::timelocal()\fR does not handle fractional seconds anymore.
The rationale is that neither does \fIlocaltime()\fR, and \fItimelocal()\fR and
\&\fIlocaltime()\fR are supposed to be inverses of each other.
.Sh "bless(\s-1REF\s0, \s-1REF\s0) no longer supported"
.IX Subsection "bless(REF, REF) no longer supported"
The semantics of bless(\s-1REF\s0, \s-1REF\s0) were unclear and until someone proves
it to make some sense, it is forbidden.
.Sh "Self-ties are unsupported"
.IX Subsection "Self-ties are unsupported"
Self-ties of arrays and hashes are no longer supported.  Attempts to
do this will cause fatal errors.
.Sh "Tied hash methods \s-1EXISTS\s0 and \s-1DELETE\s0 are mandatory"
.IX Subsection "Tied hash methods EXISTS and DELETE are mandatory"
Tied hash interfaces are now required to have the \s-1EXISTS\s0 and \s-1DELETE\s0
methods (either own or inherited).
.Sh "Perl hashes remain unordered, only differently so"
.IX Subsection "Perl hashes remain unordered, only differently so"
Although \*(L"you shouldn't do that\*(R", it was possible to write code that
depends on Perl's hashed key order (Data::Dumper does this).  The new
algorithm \*(L"One\-at\-a\-Time\*(R" produces a different hashed key order.
More details are in perl58delta, \*(L"Performance Enhancements\*(R".
.ie n .Sh """use""\fP may fail if module does not define a \f(CW$VERSION"
.el .Sh "\f(CWuse\fP may fail if module does not define a \f(CW$VERSION\fP"
.IX Subsection "use may fail if module does not define a $VERSION"
If you specify a required minimum version when loading a
module with \f(CW\*(C`use\*(C'\fR, and that module does not define a \f(CW$VERSION\fR,
a fatal error is produced.
.Sh "chat2.pl has been removed"
.IX Subsection "chat2.pl has been removed"
The obsolete chat2 library that should never have been allowed
to escape the laboratory has been decommissioned.
.Sh "chdir('') and chdir(undef) are deprecated"
.IX Subsection "chdir('') and chdir(undef) are deprecated"
Using chdir('') or chdir(undef) instead of explicit \fIchdir()\fR is
doubtful.  A failure (think chdir(\fIsome_function()\fR) can lead into
unintended \fIchdir()\fR to the home directory, therefore this behaviour
is deprecated.
.Sh "\fIdump()\fP should now be spelled \fICORE::dump()\fP"
.IX Subsection "dump() should now be spelled CORE::dump()"
The builtin \fIdump()\fR function has probably outlived most of its
usefulness.  The core-dumping functionality remains
available as an explicit call to \f(CW\*(C`CORE::dump()\*(C'\fR, but in future
releases the behaviour of an unqualified \f(CW\*(C`dump()\*(C'\fR call may change.
.Sh "Unimplemented \s-1POSIX\s0 regex features are now fatal"
.IX Subsection "Unimplemented POSIX regex features are now fatal"
The unimplemented \s-1POSIX\s0 regex features [[.cc.]] and [[=c=]] are still
recognised but now cause fatal errors.  The previous behaviour of
ignoring them by default and warning if requested was unacceptable
since it, in a way, falsely promised that the features could be used.
.ie n .Sh """:raw""\fP and \f(CW"":crlf"" disciplines no longer have inverse behaviors"
.el .Sh "\f(CW:raw\fP and \f(CW:crlf\fP disciplines no longer have inverse behaviors"
.IX Subsection ":raw and :crlf disciplines no longer have inverse behaviors"
Previous versions of perl and some readings of some sections of Camel
\&\s-1III\s0 implied that the \f(CW\*(C`:raw\*(C'\fR \*(L"discipline\*(R" was the inverse of \f(CW\*(C`:crlf\*(C'\fR.
Turning off \*(L"clrfness\*(R" is no longer enough to make a stream truly
binary. So the PerlIO \f(CW\*(C`:raw\*(C'\fR layer (or \*(L"discipline\*(R", to use the Camel
book's older terminology) is now formally defined as being equivalent
to binmode(\s-1FH\s0) \- which is in turn defined as doing whatever is
necessary to pass each byte as-is without any translation.  In
particular binmode(\s-1FH\s0) \- and hence \f(CW\*(C`:raw\*(C'\fR \- will now turn off both
\&\s-1CRLF\s0 and \s-1UTF\-8\s0 translation and remove other layers (e.g. :\fIencoding()\fR)
which would modify byte stream.
.Sh "pack/unpack D/F recycled"
.IX Subsection "pack/unpack D/F recycled"
The undocumented pack/unpack template letters D/F have been recycled
for better use: now they stand for long double (if supported by the
platform) and \s-1NV\s0 (Perl internal floating point type).  (They used
to be aliases for d/f, but you never knew that.)
.Sh "\s-1EQ\s0, \s-1NE\s0, \s-1LT\s0, \s-1LE\s0, \s-1GE\s0, \s-1GT\s0 operators no longer part of the language"
.IX Subsection "EQ, NE, LT, LE, GE, GT operators no longer part of the language"
The long deprecated uppercase aliases for the string comparison
operators (\s-1EQ\s0, \s-1NE\s0, \s-1LT\s0, \s-1LE\s0, \s-1GE\s0, \s-1GT\s0) have now been removed.
.Sh "tr///CU has been removed"
.IX Subsection "tr///CU has been removed"
The tr///C and tr///U features have been removed and will not return;
the interface was a mistake.  Sorry about that.  For similar
functionality, see pack('U0', ...) and pack('C0', ...).
.PP
This change was already included in Perl 5.6.1.
.Sh "New warnings and deprecations"
.IX Subsection "New warnings and deprecations"
.IP "\(bu" 8
The (bogus) escape sequences \e8 and \e9 now give an optional warning
(\*(L"Unrecognized escape passed through\*(R").  There is no need to \e\-escape
any \f(CW\*(C`\ew\*(C'\fR character.
.IP "\(bu" 8
*glob{\s-1FILEHANDLE\s0} is deprecated. Use *glob{\s-1IO\s0} instead.
.IP "\(bu" 8
The \f(CW\*(C`package;\*(C'\fR syntax (\f(CW\*(C`package\*(C'\fR without an argument) has been
deprecated.  Its semantics were never that clear and its
implementation even less so.  If you have used that feature to
disallow all but fully qualified variables, \f(CW\*(C`use strict;\*(C'\fR instead.
.IP "\(bu" 8
The current user-visible implementation of pseudo-hashes (the weird
use of the first array element) is deprecated starting from Perl 5.8.0
and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather
ugly, but the current implementation slows down normal array and hash
use quite noticeably. The \f(CW\*(C`fields\*(C'\fR pragma interface will remain
available.  The \fIrestricted hashes\fR interface is expected to
be the replacement interface (see Hash::Util).  If your existing
programs depends on the underlying implementation, consider using
\&\f(CW\*(C`Class::PseudoHash\*(C'\fR from \s-1CPAN\s0.
.IP "\(bu" 8
After years of trying, suidperl is considered to be too complex to
ever be considered truly secure.  The suidperl functionality is likely
to be removed in a future release.
.IP "\(bu" 8
Earlier Perls treated \*(L"sub foo (@bar)\*(R" as equivalent to \*(L"sub foo (@)\*(R".
The prototypes are now checked better at compile-time for invalid
syntax.  An optional warning is generated (\*(L"Illegal character in
prototype...\*(R")  but this may be upgraded to a fatal error in a future
release.
.IP "\(bu" 8
The \f(CW\*(C`exec LIST\*(C'\fR and \f(CW\*(C`system LIST\*(C'\fR operations now produce warnings on
tainted data and in some future release they will produce fatal errors.
.IP "\(bu" 8
The existing behaviour when localising tied arrays and hashes is wrong,
and will be changed in a future release, so do not rely on the existing
behaviour.
.IP "\(bu" 8
The arguments of \fIWriteMakefile()\fR in Makefile.PL are now checked
for sanity much more carefully than before.  This may cause new
warnings when modules are being installed.  See ExtUtils::MakeMaker
for more details.
.IP "\(bu" 8
Using arrays or hashes as references (e.g. \f(CW\*(C`%foo\->{bar}\*(C'\fR
has been deprecated for a while.  Now these constructs will elicit an
optional warning.
.IP "\(bu" 8
Use of the \f(CW\*(C`/c\*(C'\fR match modifier without an accompanying \f(CW\*(C`/g\*(C'\fR modifier
elicits a new warning: \f(CW\*(C`Use of /c modifier is meaningless without /g\*(C'\fR.
.Sp
Use of \f(CW\*(C`/c\*(C'\fR in substitutions, even with \f(CW\*(C`/g\*(C'\fR, elicits the
\&\f(CW\*(C`Use of /c modifier is meaningless in s///\*(C'\fR warning.
.Sp
Use of \f(CW\*(C`/g\*(C'\fR with \f(CW\*(C`split\*(C'\fR elicits the
\&\f(CW\*(C`Use of /g modifier is meaningless in split\*(C'\fR warning.
.IP "\(bu" 8
Ambiguous ranges in the transliteration operator (such as \f(CW\*(C`a\-z\-9\*(C'\fR) now
provoke warnings.
.IP "\(bu" 8
\&\f(CW\*(C`push @a;\*(C'\fR and \f(CW\*(C`unshift @a;\*(C'\fR (with no values to push or unshift)
now produce a warning.  This may be a problem for generated code.
.IP "\(bu" 8
Many other new warnings have been added (see perl58delta for a complete
list).  All of them are optional, and are only
enabled when running perl with the \f(CW\*(C`\-w\*(C'\fR switch or with \f(CW\*(C`use warnings\*(C'\fR.
Warnings can be suppressed in specific lexical scopes using
\&\f(CW\*(C`no warnings\*(C'\fR.
.SH "Known Issues"
.IX Header "Known Issues"
.Sh "All Platforms"
.IX Subsection "All Platforms"
The definitive summary of platform-independent changes and known issues in
this release is available in perl58delta, perl581delta, perldelta
and in the Change Log that comes with the ActivePerl distribution.
.PP
Only the significant known issues from perl58delta are listed here.
.IP "The Compiler Suite Is Still Very Experimental" 8
.IX Item "The Compiler Suite Is Still Very Experimental"
The compiler suite is slowly getting better but it continues to be
highly experimental.  Use in production environments is discouraged.
.IP "Localising Tied Arrays and Hashes Is Broken" 8
.IX Item "Localising Tied Arrays and Hashes Is Broken"
.Vb 1
\&    local %tied_array;
.Ve
.Sp
doesn't work as one would expect: the old value is restored
incorrectly.  This will be changed in a future release, but we don't
know yet what the new semantics will exactly be.  In any case, the
change will break existing code that relies on the current
(ill\-defined) semantics, so just avoid doing this in general.
.IP "Self-tying Problems" 8
.IX Item "Self-tying Problems"
Self-tying of arrays and hashes is broken in rather deep and
hard-to-fix ways.  As a stop-gap measure to avoid people from getting
frustrated at the mysterious results (core dumps, most often), it is
forbidden for now (you will get a fatal error even from an attempt).
.Sp
A change to self-tying of globs has caused them to be recursively
referenced (see: perlobj, \*(L"Two\-Phased Garbage Collection\*(R").  You
will now need an explicit untie to destroy a self-tied glob.  This
behaviour may be fixed at a later date.
.Sp
Self-tying of scalars and \s-1IO\s0 objects works.
.IP "Tied/Magical Array/Hash Elements Do Not Autovivify" 8
.IX Item "Tied/Magical Array/Hash Elements Do Not Autovivify"
For normal arrays \f(CW\*(C`$foo = \e$bar[1]\*(C'\fR will assign \f(CW\*(C`undef\*(C'\fR to
\&\f(CW$bar[1]\fR (assuming that it didn't exist before), but for
tied/magical arrays and hashes such autovivification does not happen
because there is currently no way to catch the reference creation.
The same problem affects slicing over non-existent indices/keys of
a tied/magical array/hash.
.IP "Unicode in package/class and subroutine names does not work" 8
.IX Item "Unicode in package/class and subroutine names does not work"
One can have Unicode in identifier names, but not in package/class or
subroutine names.  While some limited functionality towards this does
exist as of Perl 5.8.0, that is more accidental than designed; use of
Unicode for the said purposes is unsupported.
.Sp
One reason for this incompleteness is its (currently) inherent
non\-portability: since both package names and subroutine names may
need to be mapped to file and directory names, the Unicode capability
of the filesystem becomes important, and there unfortunately aren't
portable answers.
.Sh "Linux and Solaris"
.IX Subsection "Linux and Solaris"
.IP "\(bu" 8
Some versions of tar on Solaris have bugs that prevent proper extraction
of files in a package that has long path names.  Most other versions
of tar on Solaris use a different method than \s-1GNU\s0 tar to encode pathnames
longer than 100 characters.  \s-1GNU\s0 tar is therefore required to extract the
package into the filesystem correctly.  A precompiled version of \s-1GNU\s0 tar
for the sparc platform is available from:
.Sp
.Vb 1
\&    http://www.sunfreeware.com/
.Ve
.Sp
You can also get the source package for \s-1GNU\s0 tar from:
.Sp
.Vb 1
\&    http://www.gnu.org/
.Ve
.IP "\(bu" 8
The suidperl executable is not included in this package due to potential
security issues.  If you wish to use suidperl in your installation, we
recommend building Perl from source.  The source code for ActivePerl is
available at:
.Sp
.Vb 1
\&    http://www.ActiveState.com
.Ve
.Sh "Windows"
.IX Subsection "Windows"
.IP "\(bu" 8
ActivePerl depends on \s-1MSVCRT\s0.DLL being installed on the target system.
This file ships with all versions of Windows except for Windows 95.
If you do not have this file installed on your system you may
experience problems installing and/or running components within ActivePerl.
.Sp
You can download a self extracting executable that contains \s-1MSVCRT\s0.DLL
from:
.Sp
.Vb 1
\&    ftp://ftp.microsoft.com/softlib/mslfiles/msvcrt.exe
.Ve
.Sp
Save the file in a temporary directory and double click on it to
extract the files. Follow the instructions in the ReadMe.txt file
contained in the package in order to install the missing file.
.IP "\(bu" 8
The \fIfork()\fR emulation has known limitations.  See perlfork for a
detailed summary.  In particular, \fIfork()\fR emulation will not work
correctly with extensions that are either not thread\-safe, or maintain
internal state that cannot be cloned in the psuedo-child process.  This
caveat currently applies to extensions such as Tk and Storable.
.IP "\(bu" 8
It seems that some people are having problems with the ActivePerl \s-1MSI\s0
installer.
.Sp
The first thing to note is that you \s-1CANNOT\s0 install ActivePerl 5.8 over
an older version of ActivePerl based on 5.6 or 5.005, such as build 633
or any other 600 or 500 series build.
.Sp
We have determined that one cause of this error message is due to other
installations of Perl that may be pointed at by something in the
environment.
.Sp
\&\fBWorkaround\fR
.Sp
The sure-fire solution is to make absolutely certain that no other
installations of Perl are on the target machine. Realizing that this is not
always possible, you can follow these steps to ensure the other
installations will not interfere.
.Sp
1) Stop the \*(L"Windows Installer\*(R" service. This can be accomplished from the
command prompt using the following command:
.Sp
.Vb 1
\&    c:\e> net stop "Windows Installer"
.Ve
.Sp
2) Temporarily remove or rename \s-1PERLLIB\s0 and \s-1PERL5LIB\s0 environment
variables in the system environment.
.Sp
3) Temporarily remove or rename the following registry values:
.Sp
.Vb 4
\&    [\e\eHKEY_LOCAL_MACHINE\eSoftware\ePerl] lib = <directory> (REG_SV)
\&    [\e\eHKEY_LOCAL_MACHINE\eSoftware\ePerl] sitelib = <directory> (REG_SV)
\&    [\e\eHKEY_LOCAL_MACHINE\eSoftware\ePerl] lib-<PerlVersion> = <directory> (REG_SV)
\&    [\e\eHKEY_LOCAL_MACHINE\eSoftware\ePerl] sitelib-<PerlVersion> = <directory>(REG_SV)
.Ve
.Sp
4) Proceed with the installation.
.Sp
Once the installation has completed successfully, the above actions may be
undone although restoring the environment variables or the registry values
may interfere with the proper operation of your new ActivePerl
installation.
.Sp
In order to perform all of the above steps, you will need to have
Administrative privileges on the target machine. If you do not have the
required privileges you should contact you Administrator.
.IP "\(bu" 8
Norton AntiVirus 2000 detects \s-1VBS\s0.NewLove.A in the file ActivePerl\-Winfaq12.html.
.Sp
\&\fBWorkaround\fR
.Sp
This is a false positive by Norton AntiVirus.  ActivePerl\-Winfaq12.html has
been examined by hand, and it is likely that the following example code is
what causes the false report.
.Sp
.Vb 12
\&    <BLOCKQUOTE>
\&    <P><CODE>use strict;<BR>
\&      use Win32::OLE;<BR>
\&      use Win32::OLE::Const 'Microsoft Outlook';<BR>
\&      <BR>
\&      my $Outlook = Win32::OLE-&gt;new('Outlook.Application', 'Quit');<BR>
\&      my $ol = Win32::OLE::Const-&gt;Load($Outlook);<BR>
\&      <BR>
\&      my $namespace = $Outlook-&gt;GetNamespace(&quot;MAPI&quot;);<BR>
\&      my $Folder = $namespace-&gt;GetDefaultFolder(olFolderInbox);<BR>
\&      my $NewFolder = $Folder-&gt;Folders-&gt;Add(&quot;Test1&quot;);</CODE></P>
\&    </BLOCKQUOTE>
.Ve
.Sp
This can be tested by removing the above code from the ActivePerl\-Winfaq12.html
file and rescanning with Norton AntiVirus.  Norton AntiVirus will no longer
detect \s-1VBS\s0.NewLove.A.
.Sp
Symantec has been notified of this issue.
.IP "\(bu" 8
The following Microsoft knowledge base articles may be helpful in solving \s-1MSI\s0
problems:
.Sp
Q236597 \- \s-1OFF2000:\s0 Error Message: The Installation Package Could Not Be Opened ...
http://support.microsoft.com/support/kb/articles/Q236/5/97.ASP
.Sp
Q224094 \- \s-1OFF2000:\s0 Error Message: This Application Requires the Windows Installer to Run
http://support.microsoft.com/support/kb/articles/Q224/0/94.ASP
.Sp
Q247532 \- Works 2000 Err Msg: Installer Terminated Prematurely
http://support.microsoft.com/support/kb/articles/Q247/5/32.ASP
.Sp
\&\*(L"Error 1303. The installer has insufficient privileges...\*(R" Running Office Setup
http://support.microsoft.com/support/kb/articles/Q228/6/58.ASP
.Sp
Error Message: Error 1316 Running Setup for Admin Installation
http://support.microsoft.com/support/kb/articles/Q228/5/92.ASP
.Sp
Error 1327 Invalid Drive During Office Installation
http://support.microsoft.com/support/kb/articles/Q217/6/66.ASP
.IP "\(bu" 8
On Windows 9x, the system must be rebooted for the \s-1PATH\s0 environment variable
to take effect.
.Sp
On Windows 9x, the \s-1PATH\s0 environment variable settings are not removed after an
uninstall.
.Sh "Further Information"
.IX Subsection "Further Information"
The Perl distribution comes with extensive documentation.  On Unix platforms,
all the standard documentation is installed as man pages under the Perl
install location.  The location of the man pages may need to be added to the
\&\s-1MANPATH\s0 environment variable in order to access them.  For example, in
the C shell:
.PP
.Vb 1
\&    % setenv MANPATH /opt/ActivePerl-5.8/man:$MANPATH
.Ve
.PP
The documentation is installed in \s-1HTML\s0 format on all platforms. If ActivePerl
was installed in \fI/opt/ActivePerl\-5.8\fR then the \s-1HTML\s0 documentation
would be located in \fI/opt/ActivePerl\-5.8/html\fR.
.PP
On Windows, the standard documentation along with Windows-specific Perl
documentation is installed in \s-1HTML\s0 format, and is accessible from the
\&\*(L"Start\*(R" menu.
.PP
Updated versions of the \s-1HTML\s0 documentation will always be available at
the ActiveState website:
.PP
.Vb 1
\&    http://www.ActiveState.com/ActivePerl/
.Ve
.SH "Reporting Problems"
.IX Header "Reporting Problems"
Please report any problems you encounter with this release at the
following location:
.PP
.Vb 1
\&    http://bugs.ActiveState.com/ActivePerl/
.Ve
.PP
If you do not have web access, reports can be also sent via email to
ActivePerl\-Bugs@ActiveState.com.  Please be sure to include detailed
information about the platform in your message.
.PP
As far as possible, please ensure that there is enough information in
the report to reproduce the bug elsewhere.  It also helps to submit a
minimal test case that exhibits the bug.
