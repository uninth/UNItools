#include "gnu-h-v.h"
static char const help[] = ""
"[options] file...\n"
"Options:\n"
"  -f[REV]       Force new entry, even if no content changed.\n"
"  -I[REV]       Interactive.\n"
"  -i[REV]       Initial checkin; error if RCS file already exists.\n"
"  -j[REV]       Just checkin, don't init; error if RCS file does not exist.\n"
"  -k[REV]       Compute revision from working file keywords.\n"
"  -q[REV]       Quiet mode.\n"
"  -r[REV]       Do normal checkin, if REV is specified;\n"
"                otherwise, release lock and delete working file.\n"
"  -l[REV]       Like -r, but immediately checkout locked (co -l) afterwards.\n"
"  -u[REV]       Like -l, but checkout unlocked (co -u).\n"
"  -M[REV]       Reset working file mtime (relevant for -l, -u).\n"
"  -d[DATE]      Use DATE (or working file mtime).\n"
"  -mMSG         Use MSG as the log message.\n"
"  -nNAME        Assign symbolic NAME to the entry; NAME must be new.\n"
"  -NNAME        Like -n, but overwrite any previous assignment.\n"
"  -sSTATE       Set state to STATE.\n"
"  -t-TEXT       Set description to TEXT.\n"
"  -tFILENAME    Set description from text read from FILENAME.\n"
"  -T            Set the RCS file's modification time to the new\n"
"                revision's time if the former precedes the latter and there\n"
"                is a new revision; preserve the RCS file's modification\n"
"                time otherwise.\n"
"  -V            Like --version.\n"
"  -VN           Emulate RCS version N.\n"
"  -wWHO         Use WHO as the author.\n"
"  -xSUFF        Specify SUFF as a slash-separated list of suffixes\n"
"                used to identify RCS file names.\n"
"  -zZONE        Specify date output format in keyword-substitution\n"
"                and also the default timezone for -dDATE.\n"
"\n"
"Multiple flags in {fiIjklMqru} may be used, except for -r, -l, -u, which are\n"
"mutually exclusive.  If specified, REV can be symbolic, numeric, or mixed:\n"
"  symbolic      Must have been defined previously (see -n, -N).\n"
"  $             Determine from keyword values in the working file.\n"
"  .N            Prepend default branch => DEFBR.N\n"
"  BR.N          Use this, but N must be greater than any existing\n"
"                on BR, or BR must be new.\n"
"  BR            Latest rev on branch BR + 1 => BR.(L+1), or BR.1 if new branch.\n"
"If REV is omitted, compute it from the last lock (co -l), perhaps\n"
"starting a new branch.  If there is no lock, use DEFBR.(L+1).\n"
;
